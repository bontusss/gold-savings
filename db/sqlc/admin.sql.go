// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: admin.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (email, password_hash)
VALUES ($1, $2)
RETURNING id, email, created_at
`

type CreateAdminParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateAdminRow struct {
	ID        uuid.UUID    `json:"id"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.Email, arg.PasswordHash)
	var i CreateAdminRow
	err := row.Scan(&i.ID, &i.Email, &i.CreatedAt)
	return i, err
}

const createInvestmentPlan = `-- name: CreateInvestmentPlan :one
INSERT INTO investment_plans (name, interest_rate, min_amount, max_amount)
VALUES ($1, $2, $3, $4)
RETURNING id, name, interest_rate, min_amount, max_amount, created_at, updated_at
`

type CreateInvestmentPlanParams struct {
	Name         string `json:"name"`
	InterestRate string `json:"interest_rate"`
	MinAmount    string `json:"min_amount"`
	MaxAmount    string `json:"max_amount"`
}

func (q *Queries) CreateInvestmentPlan(ctx context.Context, arg CreateInvestmentPlanParams) (InvestmentPlan, error) {
	row := q.db.QueryRowContext(ctx, createInvestmentPlan,
		arg.Name,
		arg.InterestRate,
		arg.MinAmount,
		arg.MaxAmount,
	)
	var i InvestmentPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InterestRate,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteInvestmentPlan = `-- name: DeleteInvestmentPlan :exec
DELETE FROM investment_plans
WHERE id = $1
`

func (q *Queries) DeleteInvestmentPlan(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteInvestmentPlan, id)
	return err
}

const getAdminByEmail = `-- name: GetAdminByEmail :one
SELECT id, email, password_hash, created_at, updated_at FROM admins
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAdminByEmail(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdminByEmail, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllInvestmentPlans = `-- name: GetAllInvestmentPlans :many
SELECT id, name, interest_rate, min_amount, max_amount, created_at, updated_at FROM investment_plans
`

func (q *Queries) GetAllInvestmentPlans(ctx context.Context) ([]InvestmentPlan, error) {
	rows, err := q.db.QueryContext(ctx, getAllInvestmentPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []InvestmentPlan{}
	for rows.Next() {
		var i InvestmentPlan
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.InterestRate,
			&i.MinAmount,
			&i.MaxAmount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getInvestmentPlanByID = `-- name: GetInvestmentPlanByID :one
SELECT id, name, interest_rate, min_amount, max_amount, created_at, updated_at FROM investment_plans WHERE id = $1
`

func (q *Queries) GetInvestmentPlanByID(ctx context.Context, id int32) (InvestmentPlan, error) {
	row := q.db.QueryRowContext(ctx, getInvestmentPlanByID, id)
	var i InvestmentPlan
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.InterestRate,
		&i.MinAmount,
		&i.MaxAmount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
