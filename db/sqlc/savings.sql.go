// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: savings.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createSavingsPlan = `-- name: CreateSavingsPlan :one

INSERT INTO savings_plans (
    user_id,
    plan_ref,
    target_amount,
    current_amount,
    duration_days,
    savings_frequency,
    savings_amount,
    status
) VALUES (
             $1, $2, $3, $4, $5, $6, $7, $8
         ) RETURNING id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date
`

type CreateSavingsPlanParams struct {
	UserID           uuid.UUID `json:"user_id"`
	PlanRef          string    `json:"plan_ref"`
	TargetAmount     string    `json:"target_amount"`
	CurrentAmount    string    `json:"current_amount"`
	DurationDays     int32     `json:"duration_days"`
	SavingsFrequency string    `json:"savings_frequency"`
	SavingsAmount    string    `json:"savings_amount"`
	Status           string    `json:"status"`
}

// queries.sql
func (q *Queries) CreateSavingsPlan(ctx context.Context, arg CreateSavingsPlanParams) (SavingsPlan, error) {
	row := q.db.QueryRowContext(ctx, createSavingsPlan,
		arg.UserID,
		arg.PlanRef,
		arg.TargetAmount,
		arg.CurrentAmount,
		arg.DurationDays,
		arg.SavingsFrequency,
		arg.SavingsAmount,
		arg.Status,
	)
	var i SavingsPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanRef,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.DurationDays,
		&i.SavingsFrequency,
		&i.SavingsAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaturityDate,
	)
	return i, err
}

const deleteSavingsPlan = `-- name: DeleteSavingsPlan :exec
DELETE FROM savings_plans
WHERE id = $1
`

func (q *Queries) DeleteSavingsPlan(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSavingsPlan, id)
	return err
}

const getSavingsPlanByID = `-- name: GetSavingsPlanByID :one
SELECT id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date FROM savings_plans
WHERE id = $1
`

func (q *Queries) GetSavingsPlanByID(ctx context.Context, id uuid.UUID) (SavingsPlan, error) {
	row := q.db.QueryRowContext(ctx, getSavingsPlanByID, id)
	var i SavingsPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanRef,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.DurationDays,
		&i.SavingsFrequency,
		&i.SavingsAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaturityDate,
	)
	return i, err
}

const getSavingsPlanByPlanRef = `-- name: GetSavingsPlanByPlanRef :one
SELECT id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date FROM savings_plans
WHERE plan_ref = $1
`

func (q *Queries) GetSavingsPlanByPlanRef(ctx context.Context, planRef string) (SavingsPlan, error) {
	row := q.db.QueryRowContext(ctx, getSavingsPlanByPlanRef, planRef)
	var i SavingsPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanRef,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.DurationDays,
		&i.SavingsFrequency,
		&i.SavingsAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaturityDate,
	)
	return i, err
}

const listActiveSavingsPlans = `-- name: ListActiveSavingsPlans :many
SELECT id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date FROM savings_plans
WHERE status = 'active'
  AND maturity_date > NOW()
ORDER BY maturity_date ASC
`

func (q *Queries) ListActiveSavingsPlans(ctx context.Context) ([]SavingsPlan, error) {
	rows, err := q.db.QueryContext(ctx, listActiveSavingsPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SavingsPlan{}
	for rows.Next() {
		var i SavingsPlan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlanRef,
			&i.TargetAmount,
			&i.CurrentAmount,
			&i.DurationDays,
			&i.SavingsFrequency,
			&i.SavingsAmount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MaturityDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAllSavingsPlans = `-- name: ListAllSavingsPlans :many
SELECT id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date FROM savings_plans
ORDER BY created_at DESC
`

func (q *Queries) ListAllSavingsPlans(ctx context.Context) ([]SavingsPlan, error) {
	rows, err := q.db.QueryContext(ctx, listAllSavingsPlans)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SavingsPlan{}
	for rows.Next() {
		var i SavingsPlan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlanRef,
			&i.TargetAmount,
			&i.CurrentAmount,
			&i.DurationDays,
			&i.SavingsFrequency,
			&i.SavingsAmount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MaturityDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSavingsPlansByUser = `-- name: ListSavingsPlansByUser :many
SELECT id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date FROM savings_plans
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListSavingsPlansByUser(ctx context.Context, userID uuid.UUID) ([]SavingsPlan, error) {
	rows, err := q.db.QueryContext(ctx, listSavingsPlansByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SavingsPlan{}
	for rows.Next() {
		var i SavingsPlan
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.PlanRef,
			&i.TargetAmount,
			&i.CurrentAmount,
			&i.DurationDays,
			&i.SavingsFrequency,
			&i.SavingsAmount,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.MaturityDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const sumActiveSavingsPlans = `-- name: SumActiveSavingsPlans :one
SELECT COALESCE(SUM(current_amount),0)::float8 AS total_active_savings
FROM savings_plans
WHERE status = 'active'
`

func (q *Queries) SumActiveSavingsPlans(ctx context.Context) (float64, error) {
	row := q.db.QueryRowContext(ctx, sumActiveSavingsPlans)
	var total_active_savings float64
	err := row.Scan(&total_active_savings)
	return total_active_savings, err
}

const updateSavingsPlanAmount = `-- name: UpdateSavingsPlanAmount :one
UPDATE savings_plans
SET current_amount = $2,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date
`

type UpdateSavingsPlanAmountParams struct {
	ID            uuid.UUID `json:"id"`
	CurrentAmount string    `json:"current_amount"`
}

func (q *Queries) UpdateSavingsPlanAmount(ctx context.Context, arg UpdateSavingsPlanAmountParams) (SavingsPlan, error) {
	row := q.db.QueryRowContext(ctx, updateSavingsPlanAmount, arg.ID, arg.CurrentAmount)
	var i SavingsPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanRef,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.DurationDays,
		&i.SavingsFrequency,
		&i.SavingsAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaturityDate,
	)
	return i, err
}

const updateSavingsPlanStatus = `-- name: UpdateSavingsPlanStatus :one
UPDATE savings_plans
SET status = $2,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, user_id, plan_ref, target_amount, current_amount, duration_days, savings_frequency, savings_amount, status, created_at, updated_at, maturity_date
`

type UpdateSavingsPlanStatusParams struct {
	ID     uuid.UUID `json:"id"`
	Status string    `json:"status"`
}

func (q *Queries) UpdateSavingsPlanStatus(ctx context.Context, arg UpdateSavingsPlanStatusParams) (SavingsPlan, error) {
	row := q.db.QueryRowContext(ctx, updateSavingsPlanStatus, arg.ID, arg.Status)
	var i SavingsPlan
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.PlanRef,
		&i.TargetAmount,
		&i.CurrentAmount,
		&i.DurationDays,
		&i.SavingsFrequency,
		&i.SavingsAmount,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.MaturityDate,
	)
	return i, err
}
