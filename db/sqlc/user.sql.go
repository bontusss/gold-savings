// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countActiveNonAdminUsers = `-- name: CountActiveNonAdminUsers :one
SELECT COUNT(*)
FROM users
WHERE is_active = TRUE AND is_admin = FALSE
`

func (q *Queries) CountActiveNonAdminUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveNonAdminUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAdminUser = `-- name: CreateAdminUser :one
INSERT INTO users (email, password_hash, is_admin, first_name, last_name, phone)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, is_admin, created_at
`

type CreateAdminUserParams struct {
	Email        string       `json:"email"`
	PasswordHash string       `json:"password_hash"`
	IsAdmin      sql.NullBool `json:"is_admin"`
	FirstName    string       `json:"first_name"`
	LastName     string       `json:"last_name"`
	Phone        string       `json:"phone"`
}

type CreateAdminUserRow struct {
	ID        uuid.UUID    `json:"id"`
	Email     string       `json:"email"`
	IsAdmin   sql.NullBool `json:"is_admin"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateAdminUser(ctx context.Context, arg CreateAdminUserParams) (CreateAdminUserRow, error) {
	row := q.db.QueryRowContext(ctx, createAdminUser,
		arg.Email,
		arg.PasswordHash,
		arg.IsAdmin,
		arg.FirstName,
		arg.LastName,
		arg.Phone,
	)
	var i CreateAdminUserRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.IsAdmin,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, first_name, last_name, email, phone, password_hash, account_number, bank_name, token_balance, is_active, is_admin, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
		&i.PasswordHash,
		&i.AccountNumber,
		&i.BankName,
		&i.TokenBalance,
		&i.IsActive,
		&i.IsAdmin,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password_hash, is_admin FROM users
WHERE email = $1 LIMIT 1
`

type GetUserByEmailRow struct {
	ID           uuid.UUID    `json:"id"`
	Email        string       `json:"email"`
	PasswordHash string       `json:"password_hash"`
	IsAdmin      sql.NullBool `json:"is_admin"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.IsAdmin,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, first_name, last_name, email, phone, password_hash, account_number, bank_name, token_balance, is_active, is_admin, created_at, updated_at FROM users ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.PasswordHash,
			&i.AccountNumber,
			&i.BankName,
			&i.TokenBalance,
			&i.IsActive,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, first_name, last_name, email, phone, password_hash, account_number, bank_name, token_balance, is_active, is_admin, created_at, updated_at FROM users 
WHERE 
    (first_name ILIKE '%' || $1 || '%' OR 
     last_name ILIKE '%' || $1 || '%' OR 
     email ILIKE '%' || $1 || '%' OR 
     phone ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
`

func (q *Queries) SearchUsers(ctx context.Context, dollar_1 sql.NullString) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.Phone,
			&i.PasswordHash,
			&i.AccountNumber,
			&i.BankName,
			&i.TokenBalance,
			&i.IsActive,
			&i.IsAdmin,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users SET is_active = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID       uuid.UUID    `json:"id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatus, arg.ID, arg.IsActive)
	return err
}
