// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const countActiveUsers = `-- name: CountActiveUsers :one
SELECT COUNT(*)
FROM users
WHERE is_active = TRUE
`

func (q *Queries) CountActiveUsers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveUsers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password_hash, username, phone, reference_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, email, phone, total_savings, total_withdrawn, reference_id, password_hash, account_number, bank_name, token_balance, is_active, email_verified, verification_code, verification_expires_at, created_at, updated_at
`

type CreateUserParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
	Username     string `json:"username"`
	Phone        string `json:"phone"`
	ReferenceID  string `json:"reference_id"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.PasswordHash,
		arg.Username,
		arg.Phone,
		arg.ReferenceID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.TotalSavings,
		&i.TotalWithdrawn,
		&i.ReferenceID,
		&i.PasswordHash,
		&i.AccountNumber,
		&i.BankName,
		&i.TokenBalance,
		&i.IsActive,
		&i.EmailVerified,
		&i.VerificationCode,
		&i.VerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUserByID(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserByID, id)
	return err
}

const deleteUsers = `-- name: DeleteUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteUsers)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, username, email, phone, total_savings, total_withdrawn, reference_id, password_hash, account_number, bank_name, token_balance, is_active, email_verified, verification_code, verification_expires_at, created_at, updated_at FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.TotalSavings,
		&i.TotalWithdrawn,
		&i.ReferenceID,
		&i.PasswordHash,
		&i.AccountNumber,
		&i.BankName,
		&i.TokenBalance,
		&i.IsActive,
		&i.EmailVerified,
		&i.VerificationCode,
		&i.VerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, email, phone, total_savings, total_withdrawn, reference_id, password_hash, account_number, bank_name, token_balance, is_active, email_verified, verification_code, verification_expires_at, created_at, updated_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Phone,
		&i.TotalSavings,
		&i.TotalWithdrawn,
		&i.ReferenceID,
		&i.PasswordHash,
		&i.AccountNumber,
		&i.BankName,
		&i.TokenBalance,
		&i.IsActive,
		&i.EmailVerified,
		&i.VerificationCode,
		&i.VerificationExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, phone, total_savings, total_withdrawn, reference_id, password_hash, account_number, bank_name, token_balance, is_active, email_verified, verification_code, verification_expires_at, created_at, updated_at FROM users ORDER BY created_at DESC
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Phone,
			&i.TotalSavings,
			&i.TotalWithdrawn,
			&i.ReferenceID,
			&i.PasswordHash,
			&i.AccountNumber,
			&i.BankName,
			&i.TokenBalance,
			&i.IsActive,
			&i.EmailVerified,
			&i.VerificationCode,
			&i.VerificationExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markUserEmailVerified = `-- name: MarkUserEmailVerified :exec
UPDATE users
SET email_verified = $2,
    verification_code = $3,
    verification_expires_at = NULL,
    updated_at = NOW()
WHERE id = $1
`

type MarkUserEmailVerifiedParams struct {
	ID               uuid.UUID      `json:"id"`
	EmailVerified    bool           `json:"email_verified"`
	VerificationCode sql.NullString `json:"verification_code"`
}

func (q *Queries) MarkUserEmailVerified(ctx context.Context, arg MarkUserEmailVerifiedParams) error {
	_, err := q.db.ExecContext(ctx, markUserEmailVerified, arg.ID, arg.EmailVerified, arg.VerificationCode)
	return err
}

const searchUsers = `-- name: SearchUsers :many
SELECT id, username, email, phone, total_savings, total_withdrawn, reference_id, password_hash, account_number, bank_name, token_balance, is_active, email_verified, verification_code, verification_expires_at, created_at, updated_at FROM users
WHERE
    (first_name ILIKE '%' || $1 || '%' OR
     last_name ILIKE '%' || $1 || '%' OR
     email ILIKE '%' || $1 || '%' OR
     phone ILIKE '%' || $1 || '%')
ORDER BY created_at DESC
`

func (q *Queries) SearchUsers(ctx context.Context, dollar_1 sql.NullString) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, searchUsers, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Phone,
			&i.TotalSavings,
			&i.TotalWithdrawn,
			&i.ReferenceID,
			&i.PasswordHash,
			&i.AccountNumber,
			&i.BankName,
			&i.TokenBalance,
			&i.IsActive,
			&i.EmailVerified,
			&i.VerificationCode,
			&i.VerificationExpiresAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const setUserEmailVerification = `-- name: SetUserEmailVerification :exec
UPDATE users
SET verification_code = $2,
    verification_expires_at = $3,
    updated_at = NOW()
WHERE id = $1
`

type SetUserEmailVerificationParams struct {
	ID                    uuid.UUID      `json:"id"`
	VerificationCode      sql.NullString `json:"verification_code"`
	VerificationExpiresAt sql.NullTime   `json:"verification_expires_at"`
}

func (q *Queries) SetUserEmailVerification(ctx context.Context, arg SetUserEmailVerificationParams) error {
	_, err := q.db.ExecContext(ctx, setUserEmailVerification, arg.ID, arg.VerificationCode, arg.VerificationExpiresAt)
	return err
}

const updateUserStatus = `-- name: UpdateUserStatus :exec
UPDATE users SET is_active = $2, updated_at = NOW() WHERE id = $1
`

type UpdateUserStatusParams struct {
	ID       uuid.UUID    `json:"id"`
	IsActive sql.NullBool `json:"is_active"`
}

func (q *Queries) UpdateUserStatus(ctx context.Context, arg UpdateUserStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserStatus, arg.ID, arg.IsActive)
	return err
}
